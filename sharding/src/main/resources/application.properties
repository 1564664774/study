# sharding JDBC分片策略
#数据源名称(可以随便取)，多数据源以逗号分隔
spring.shardingsphere.datasource.names=m1

#一个实体类可以对应多张表, 覆盖
spring.main.allow-bean-definition-overriding=true

#数据库 URL 连接
# 数据库连接池类名称
# 数据库驱动类名
# 数据库用户名
# 数据库密码
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/course_stu?characterEncoding=utf8&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

#指定一下course表分布情况
#spring.shardingsphere.sharding.tables.course.actual-data-nodes=m1.course_$->{1..9}

#指定主键生成策略 SNOWFLAKE雪花算法
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE

#指定分片策略, 约定cid为偶数放到1表, 奇数放到2表
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 +1}
spring.shardingsphere.sharding.tables.course.table-strategy.standard.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.standard.precise-algorithm-class-name=com.zqh.config.PreciseModuloTableShardingAlgorithm

#查看sql输出日志
spring.shardingsphere.props.sql.show=true